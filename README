NAME
    RT-Extension-PagerDuty - Two way integration with PagerDuty

DESCRIPTION
    This RT extension allows for two way integration with the PagerDuty
    incident response platform.

    On ticket creation in RT trigger an incident in PagerDuty. When a ticket
    is acknowledged or resolved in RT update the incident in PagerDuty.

    Configure a PagerDuty webhook to push noticications to RT from
    PagerDuty. When a new incident is triggered in PagerDuty have it create
    a ticket in RT. If an incident is acknowledged or resolved in PagerDuty
    update the corresponding ticket in RT.

RT VERSION
    Works with RT 5.

INSTALLATION
    perl Makefile.PL
    make
    make install
        May need root permissions

    make initdb
        Only run this the first time you install this module.

        If you run this twice, you may end up with duplicate data in your
        database.

        If you are upgrading this module, check for upgrading instructions
        in case changes need to be made to your database.

    Edit your /opt/rt5/etc/RT_SiteConfig.pm
        Add this line:

            Plugin('RT::Extension::PagerDuty');

        To allow PagerDuty to send data to RT without a referrer:

            Set( %ReferrerComponents,
                '/PagerDuty/WebHook.html' => 1,
            );

        To define the interactions between RT and PagerDuty:

            Set(
                $PagerDuty,
                {
                    services => {
                        'PagerDuty Service ID' => {
                            api_token => 'PagerDuty API Token',
                            api_user => 'PagerDuty User',
                            create_queue => 'General',
                        }
                    },
                    queues => {
                        'RT Queue Name' => {
                            service => 'PagerDuty Service ID',
                            acknowledged => 'open',
                            resolved => 'resolved',
                        }
                    }
                }
            );

        The services section maps a PagerDuty service id to the token and
        user to use for API access. The api_token and api_user values are
        required. The optional create_queue value is the RT queue name where
        new RT tickets should be created if a PagerDuty incident creates a
        new RT ticket. create_queue defaults to the General queue if not
        specified. Use '*' as the PagerDuty Service ID to apply to multiple
        PagerDuty services.

        The queues section maps an RT queue name to the PagerDuty service
        where it should trigger new incidents when an RT ticket is created.
        The service value is required and must be a PagerDuty service id.
        The acknowledged and resolved optional values indicate what RT
        ticket status to use when an incident is acknowledged or resolved on
        PagerDuty. If not specified they default to acknowledged => 'open'
        and resolved => 'resolved'. Use '*' as the RT Queue Name to apply to
        multiple RT queues.

        To get the PagerDuty Service ID login to your PagerDuty account and
        go to Services -> Service Directory. Click on the Service you want
        the ID for and the the ID will be at the end of the URL. For
        example:

            pagerduty.com/service-directory/P3AFFQR

        the Service ID is P3AFFQR.

        To create an api_token login to your PagerDuty account and go to
        Integrations -> API Access Keys. Click the Create New API Key
        button. Add a description and click Create Key. Copy the key and
        paste it into the $PagerDuty config as the api_token. You will not
        be able to view the key again but you can generate a new one if you
        lose the key.

        The api_user is the email address for a valid PagerDuty user that
        has access to the PagerDuty Service you are integrating with.

    Clear your mason cache
            rm -rf /opt/rt5/var/mason_data/obj

    Restart your webserver

Scrips
    This extension will install three new Scrips that do not apply to any
    queues: On Acknowledge PagerDuty Acknowledge, On Create PagerDuty
    Trigger and On Resolve PagerDuty Resolve.

    You need to apply them to all the queues that integrate with PagerDuty.

Custom fields
    This extension adds two ticket custom fields: PagerDuty ID and PagerDuty
    URL.

    You need to apply them to all the queues that integrate with PagerDuty.

    When an RT ticket creates an incident on PagerDuty or an incident on
    PagerDuty creates an RT ticket the custom fields are automatically
    filled in. The PagerDuty URL links directly to the incident on
    PagerDuty.

    If you would like to group the new custom fields in their own PagerDuty
    group you can use the CustomFieldGroupings config option:

        Set(
            %CustomFieldGroupings,
            'RT::Ticket' => [
                'PagerDuty' => [ 'PagerDuty ID', 'PagerDuty URL' ],
            ],
        );

Set up a webhook in PagerDuty
    1. Create an auth token in RT
        Select or create an RT user that will be used for the webhook, then
        create an auth token from the user admin page.

        Note that the user needs to be able to create and update tickets,
        usually you can grant SeeQueue, CreateTicket and ModifyTicket rights
        to all the queues that integrate with PagerDuty.

    2. Create the WebHook
        Go to the PagerDuty Service Integrations Webhooks, add a new
        webhook, use https://your.rt.example/PagerDuty/WebHook.html as the
        webhook URL, note that you need to replace https://your.rt.example
        with your real RT instance.

        Add a custom header with the name Authorization and value token
        #-#-abc123 where #-#-abc123 is the value of the auth token you
        created in step one. Currently the only event subscriptions
        supported are incident.acknowledged, incident.resolved and
        incident.triggered.

        Note that the Send Test Event button sends a ping event, no tickets
        will be created.

AUTHOR
    Best Practical Solutions, LLC <modules@bestpractical.com>

    All bugs should be reported via email to
        bug-RT-Extension-PagerDuty@rt.cpan.org
    or via the web at
        http://rt.cpan.org/Public/Dist/Display.html?Name=RT-Extension-PagerDuty
LICENSE AND COPYRIGHT
    This software is Copyright (c) 2022 by BPS

    This is free software, licensed under:

      The GNU General Public License, Version 2, June 1991

